@page "/employees"
@inject MudBlazor.ISnackbar snackBar
@inject IJSRuntime JsRuntime

<MudCard Elevation="25">
	<MudCardHeader>
		<CardHeaderContent>
			<MudText Typo="Typo.h6">Employees</MudText>
		</CardHeaderContent>
	</MudCardHeader>
	<MudCardContent>
		<EditForm OnValidSubmit="Add" Model="@employee">
			<MudTextField @bind-Value="@employee.FirstName" Label="Name of Department"></MudTextField>
			<br/>
			<MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="Add">Add Department</MudButton>
		</EditForm>
	</MudCardContent>
</MudCard>
<br/>

<MudTable Items="GetAll()" Filter="new Func<Employee, bool>(Search)" @bind-employee="employee">
	<ToolBarContent>
		<MudText Typo="Typo.h6">Employees</MudText>
		<MudSpacer/>
		<MudTextField @bind-Value="searchString" Placeholder="Search For"></MudTextField>
	</ToolBarContent>
	<HeaderContent>
		<MudTh>Employee Name</MudTh>
		<MudTh>Actions</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="Employee">@context.FirstName</MudTd>
		<MudTd DataLabel="Actions">
			<MudFab OnClick="@(() => Update(context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small"></MudFab>
			<MudFab OnClick="@(() => Delete(context))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small"></MudFab>
		</MudTd>
	</RowTemplate>
</MudTable>




@code {
	private string searchString = "";
	private Employee employee = new Employee();
	private List<Employee> employees = new ();

	protected override async Task OnInitializedAsync()
	{
		employees = employeeService.GetAll();
	}

	private bool Search(Employee employee)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;

		if (employee.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;		


		return false;
	}

	private List<Employee> GetAll()
	{
		employees = employeeService.GetAll();
		return employees;
	}

	private void Add()
	{
		if (employee.EmployeeId == 0)
		{
			employeeService.Add(employee);
			snackBar.Add($"{employee.EmployeeId} EmployeeId Added", Severity.Success);
		}
		else
		{
			employeeService.Update(employee);
			snackBar.Add($"{employee.EmployeeId} EmployeeId Updated", Severity.Success);
		}

		employee = new();
		GetAll();
	}

	private void Update(Employee record)
	{
		employee = record;
		// 자녀에게 자신의 상태가 변경되었고 다시 렌더링 해야한다는 사실을 알려야할 때 사용.
		StateHasChanged();
	}

	private async Task Delete(Employee record)
	{
		employeeService.Delete(record);
		GetAll();
	}
}
