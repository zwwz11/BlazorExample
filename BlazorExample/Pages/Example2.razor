@page "/example2"

@inject IUserService service
@inject IJSRuntime jsRuntime
@inject NavigationManager navi

<PageTitle>Example2</PageTitle>

<h3>Example2</h3>

<table class="table">
	<thead>
		<tr>
			<th>Id</th>
			<th>Name</th>
			<th>Sex</th>
			<th>Active</th>
		</tr>
	</thead>
	<tbody>
		@foreach(var item in users)
		{
			<tr>
				<td>@item.Id</td>
				<td>@item.Name</td>
				<td>@item.UserSex</td>
				<td><input type="checkbox" value="@item.IsActive" checked="@item.IsActive" onclick="return false;" /></td>
			</tr>
		}
	</tbody>
</table>
<div>
	<input type="button" class="btn-lg btn" id="prev" value="Previous" @onclick="PrevPage" />
	@for (int i = curPage - 2; i <= curPage + 2; i++)
	{
		int j = i;
		@if (i > 0)
		{
			if (i == curPage)
			{
				<span class="px-2" style="font-weight:bold; cursor:pointer" @onclick="(() => ShowPage(j))">@i</span>
			}
			else
			{
				<span class="px-2" style="cursor:pointer" @onclick="(() => ShowPage(j))">@i</span>
			}
		}
	}
	<input type="button" class="btn-lg btn" id="next" value="Next" @onclick="NextPage" />
</div>

<input class="btn btn-success" type="button" value="뒤로가기" onclick="@(() => navi.NavigateTo("/example1"))" />

@code {
	List<User> users = new();
	private int curPage = 1;

	protected override void OnInitialized()
	{
		ShowPage();
	}

	private void NextPage()
	{
		curPage++;
		ShowPage();
	}

	private void PrevPage()
	{
		if (curPage > 1)
		{
			curPage--;
			ShowPage();
		}
	}

	private void ShowPage()
	{
		users = service.GetAllUsersPage(curPage)?.ToList() ?? new ();
	}

	private void ShowPage(int i)
	{
		curPage = i;
		ShowPage();
	}
}
